import requests
import json
import os
import sys
import base64
from datetime import datetime, timedelta


def already_updated_this_month():
    try:
        with open("docs/lunar_calendar.json", encoding="utf-8") as f:
            data = json.load(f)
        first_entry = data[0]
        entry_month = first_entry["date"][:7]  # —Ñ–æ—Ä–º–∞—Ç YYYY-MM
        current_month = datetime.utcnow().strftime("%Y-%m")
        return entry_month == current_month
    except Exception:
        return False


def fetch_moon_phase_openmeteo(date_str):
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": 54.6872,
        "longitude": 25.2797,
        "daily": "moon_phase",
        "timezone": "Europe/Vilnius",
        "start_date": date_str,
        "end_date": date_str
    }
    try:
        response = requests.get(url, params=params)
        print(f"üåê OpenMeteo: {response.url}")
        if response.status_code == 200:
            data = response.json()
            phase_code = data["daily"]["moon_phase"][0]
            illumination = 0.0  # OpenMeteo –Ω–µ –¥–∞—ë—Ç –æ—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å
            return {
                "Phase": str(phase_code),
                "Illumination": illumination
            }
        else:
            print(f"‚ùå OpenMeteo Error {response.status_code}: {response.text}")
    except Exception as e:
        print(f"‚ùå OpenMeteo Exception: {e}")
    return None


def determine_zodiac_from_angle(angle):
    zodiac_names = [
        "–û–≤–µ–Ω", "–¢–µ–ª–µ—Ü", "–ë–ª–∏–∑–Ω–µ—Ü—ã", "–†–∞–∫", "–õ–µ–≤", "–î–µ–≤–∞",
        "–í–µ—Å—ã", "–°–∫–æ—Ä–ø–∏–æ–Ω", "–°—Ç—Ä–µ–ª–µ—Ü", "–ö–æ–∑–µ—Ä–æ–≥", "–í–æ–¥–æ–ª–µ–π", "–†—ã–±—ã"
    ]
    index = int(angle // 30) % 12
    return zodiac_names[index]


def fetch_zodiac_sign_placeholder(date_str):
    return "–ó–Ω–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


def translate_phase(phase):
    return phase  # –≤—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏


def generate_magical_tip(phase):
    return "–ú–∞–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


def generate_ritual(phase):
    return "–†–∏—Ç—É–∞–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


def generate_energy(phase):
    return "–≠–Ω–µ—Ä–≥–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"


def generate_focus(phase):
    return ["–¶–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"]


def generate_rune(phase):
    return "–†—É–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"


def generate_tarot(phase):
    return "–ê—Ä–∫–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


def generate_lunar_json(days=5):
    today = datetime.utcnow()
    data = []

    for i in range(days):
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        print(f"\nüìÖ {date_str}")
        moon_data = fetch_moon_phase_openmeteo(date_str)
        if moon_data:
            phase = moon_data.get("Phase", "")
            illum = moon_data.get("Illumination", 0.0)
            print(f"üåô –§–∞–∑–∞: {phase}, –û—Å–≤–µ—â—ë–Ω–Ω–æ—Å—Ç—å: {illum}")
            zodiac = fetch_zodiac_sign_placeholder(date_str)
            entry = {
                "date": date_str,
                "phase": phase,
                "phase_ru": translate_phase(phase),
                "illumination": illum,
                "magical_tip": generate_magical_tip(phase),
                "zodiac_sign": zodiac,
                "ritual": generate_ritual(phase),
                "energy": generate_energy(phase),
                "focus": generate_focus(phase),
                "associated_rune": generate_rune(phase),
                "tarot_arcana": generate_tarot(phase)
            }
            data.append(entry)
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∞–∑–µ –õ—É–Ω—ã")

    if not data:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–µ –±—ã–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –§–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
        return

    with open("docs/lunar_calendar.json", "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# –ó–∞–ø—É—Å–∫
generate_lunar_json()
